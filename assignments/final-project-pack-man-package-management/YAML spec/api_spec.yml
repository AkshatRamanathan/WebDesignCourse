openapi: 3.0.0
info:
  title:  Pack-Man API Specifiation
  description: API Spec for Pack-Man package management Application
  version: "1.0"
tags:
- name: User Management
  description: Everything about user login, profile management etc.
- name: Shipment
  description: Everything about Shipment, CRUD, status changing, etc.


paths:
  /api/user/registration:
    post:
      tags:
        - User Management
      summary: Register user profile
      description: Registers the users profile details.
      requestBody:
        description: The user profile with latest details is registered.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Profile registered successfully
        "400":
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Shipment not found. The specified shipmentId does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/shipment/{shipmentId}:
    put:
      tags:
        - Shipment
      summary: Update shipment information
      description: Updates the information of a specific package identified by {packageId}.
      parameters:
        - name: shipmentId
          in: path
          description: The ID of the shipment to update.
          required: true
          schema:
            type: number
      requestBody:
        description: The updated shipment information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Shipment information successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Shipment not found. The specified shipmentId does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    delete:
      tags:
        - Shipment
      summary: Update shipment information to deleted
      description: Updates the information of a specific package identified by {packageId}.
      parameters:
        - name: shipmentId
          in: path
          description: The ID of the shipment to update.
          required: true
          schema:
            type: number
      requestBody:
        description: The updated shipment information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Shipment information successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Shipment not found. The specified shipmentId does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/shipment/changestatus/{trackingId}:
    put:
      tags:
        - Shipment
      summary: Update shipment status
      description: Updates the status of a specific shipment.
      parameters:
      - name: trackingId
        in: path
        description: The ID of the shipment to update.
        required: true
        schema:
          type: number
      requestBody:
        description: The updated shipment status.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShipmentStatus'
      responses:
        '200':
          description: Status udpated successfully
        '400':
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Shipment not found. The specified shipmentId does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/shipment/getquote/:
    get:
      tags:
        - Shipment
      summary: Get shipment quotation
      description: Get shipment quotation based on package details and service type.
      requestBody:
        description: The package with required service type.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Request'
      responses:
        '200':
          description: Shipment information successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '500':
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/shipment/create:
    post:
      tags:
        - Shipment
      summary: Create a shipment
      description: creates a new shipment request package identified by {shipmentId}.
      parameters:
        - name: shipmentId
          in: path
          description: The ID of the shipment to create.
          required: true
          schema:
            type: number
      requestBody:
        description: The created shipment information.
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Shipment'
      responses:
        '200':
          description: Shipment information successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '400':
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/customer/update:
    put:
      tags:
        - User Management
      summary: Update user profile
      description: Updates the users profile details.
      requestBody:
        description: The updated user profile with latest details.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: Profile udpated successfully
        "400":
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Shipment not found. The specified shipmentId does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/shipment/{trackingId}:
    get:
      tags:
        - Shipment
      summary: Check a shipment tracking status
      description: Track the status of a specific shipment.
      parameters:
      - name: trackingId
        in: path
        description: The trackingId of the shipment to track.
        required: true
        schema:
          type: number
      responses:
        '200':
          description: Shipment status successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Shipment'
        '500':
          description: Invalid request. The request body is missing or malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
      - User Management
      summary: user login
      description: Authenticates  user and generates access token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
            examples:
              example1:
                value:
                  userName: admin
                  password: admin123
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserCredentials"
              examples:
                example1:
                  value:
                    userName: admin
                    address: 123 king st, Toronto
                    email : user@gmail.com
                    userType : ADMIN
                    token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjIxMzM2OTQ5LCJleHAiOjE2MjEzMzc1NDl9.V-7bEMOb3DugpMyfttiW9amQFVvlQ9Wmig_1iVBKxwg
        '401':
          description: Unauthorized access
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                example1:
                  value:
                    message: Invalid username or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              examples:
                example1:
                  value:
                    message: An internal server error occurred
components:
  schemas:
    Request:
      type: object
      properties:
        Package:
          type: object
          description: user this package belongs to
          $ref: '#/components/schemas/Package'
        serviceType:
          type: string
          description: type of service of shipment
          example: EXPRESS
    User:
        type: object
        properties:
          name:
            type: string
            description: name of User
            example: user's name
          email:
            type: string
            description: email of user
            example: user@name.com
          address:
            type: string
            description: address of user
            example: 123 test road
          password:
            type: string
            description: password of user
            example: uYbudisdjbnasi
          userType:
            type: string
            description: type of user
            example: CUSTOMER
    Package:
      type: object
      properties:
        from:
          type: object
          description: user this package belongs to
          $ref: '#/components/schemas/User'
        toName:
          type: string
          description: Reciever's name
          example: Jane Doe
        toAddress:
          type: string
          description: Reciever's address
          example: 148 hill, Boston
        dimension:
          type: object
          properties:
            length:
              type: number
              description: length of package
              example: 12.2
            breadth:
              type: number
              description: breadth of package
              example: 2.3
            height:
              type: number
              description: height of package
              example: 12
        packageType:
          type: string
          description: type of package
          example: DOCUMENT
    # ShipmentStatus:
    #   type: object
    #   properties:
    #     trackingId:
    #       type: number
    #       description: shipment ID for updating status
    #       example: 234234234
    #     status:
    #       type: string
    #       description: status of the shipment
    #       example: CREATED
    Shipment:
      type: object
      properties:
        package:
          type: object
          description: package of the shipment
          $ref: '#/components/schemas/Package'
        cost:
          type: number
          description: cost of the shipment
          example: 234.5
        duration:
          type: number
          description: time taken for delivery (in days)
          example: 23.9
        trackingId:
          type: number
          description: tracking ID of the shipment
          example: 2342342245
        status:
          type: string
          description: status of the shipment
          example: CREATED
        serviceType:
          type: string
          description: type of service of shipment
          example: EXPRESS
    ShipmentStatus:
      type: object
      properties:
        trackingId:
          type: number
          description: shipment ID for updating status
          example: 234234234
        status:
          type: string
          description: status of the shipment
          example: CREATED
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      example:
        code: 400
        message: "Tracking information not loaded"
    UserLogin:
      type: object
      properties:
        userName:
          type: string
          description: user username
          example: admin
        password:
          type: string
          description: user password
          example: admin1234
    UserCredentials:
      type: object
      properties:
        userName:
          type: string
          description: user username
          example: admin
        password:
          type: string
          description: user password
          example: admin1234
        address:
          type: string
          description: user address
          example: 123 king st, Toronto
        email:
          type: string
          description: user email
          example: user@gmail.com
        userType:
          type: string
          description: user is admin or customer
          example: ADMIN
        token:
          type: string
          description: token returned from backend for auth
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwiaWF0IjoxNjIxMzM2OTQ5LCJleHAiOjE2MjEzMzc1NDl9.V-7bEMOb3DugpMyfttiW9amQFVvlQ9Wmig_1iVBKxwg